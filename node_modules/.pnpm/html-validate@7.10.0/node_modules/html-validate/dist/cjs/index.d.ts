import { y as Report, c as ConfigLoader, H as HtmlValidate, a as ConfigData } from './core.js';
export { A as AttributeData, a9 as AttributeEvent, f as CSSStyleDeclaration, am as CompatibilityOptions, ab as ConditionalEvent, C as Config, a as ConfigData, b as ConfigError, c as ConfigLoader, a0 as ConfigReadyEvent, ae as DOMLoadEvent, af as DOMReadyEvent, G as DeferredMessage, ac as DirectiveEvent, ad as DoctypeEvent, D as DynamicValue, a8 as ElementReadyEvent, $ as Event, _ as EventCallback, E as EventDump, Z as EventHandler, ai as FileSystemConfigLoader, aj as Formatter, e as HtmlElement, H as HtmlValidate, ah as ListenEventMap, L as Location, B as Message, l as MetaAttribute, m as MetaAttributeAllowedCallback, o as MetaCopyableProperty, M as MetaData, j as MetaDataTable, k as MetaElement, n as MetaTable, i as NestedError, N as NodeClosed, X as Parser, O as Plugin, P as ProcessAttributeCallback, u as ProcessElementCallback, w as ProcessElementContext, y as Report, z as Reporter, F as Result, R as Rule, q as RuleConstructor, r as RuleDocumentation, h as SchemaValidationError, Q as SchemaValidationPatch, S as Severity, s as Source, t as SourceHooks, a1 as SourceReadyEvent, d as StaticConfigLoader, a6 as TagCloseEvent, a5 as TagEndEvent, a4 as TagOpenEvent, a7 as TagReadyEvent, a3 as TagStartEvent, K as TemplateExtractor, T as TextNode, g as TokenDump, a2 as TokenEvent, I as TransformContext, J as Transformer, ag as TriggerEventMap, U as UserError, aa as WhitespaceEvent, W as WrappedError, al as compatibilityCheck, p as configPresets, V as definePlugin, ak as formatterFactory, Y as ruleExists, x as sliceLocation, v as version } from './core.js';
export { d as defineMetadata, m as metadataHelper } from './meta-helper.js';
export { T as TextClassification, c as classifyNodeText } from './rules-helper.js';
export { SchemaObject } from 'ajv';

interface ExpandOptions {
    /**
     * Working directory. Defaults to `process.cwd()`.
     */
    cwd?: string;
    /**
     * List of extensions to search for when expanding directories. Extensions
     * should be passed without leading dot, e.g. "html" instead of ".html".
     */
    extensions?: string[];
}

interface InitResult {
    filename: string;
}

interface CLIOptions {
    configFile?: string;
    rules?: string | string[];
}
/**
 * @public
 */
declare class CLI {
    private options;
    private config;
    private loader;
    private ignored;
    /**
     * Create new CLI helper.
     *
     * Can be used to create tooling with similar properties to bundled CLI
     * script.
     */
    constructor(options?: CLIOptions);
    /**
     * Returns list of files matching patterns and are not ignored. Filenames will
     * have absolute paths.
     *
     * @public
     */
    expandFiles(patterns: string[], options?: ExpandOptions): string[];
    getFormatter(formatters: string): (report: Report) => string;
    /**
     * Initialize project with a new configuration.
     *
     * A new `.htmlvalidate.json` file will be placed in the path provided by
     * `cwd`.
     */
    init(cwd: string): Promise<InitResult>;
    /**
     * Searches ".htmlvalidateignore" files from filesystem and returns `true` if
     * one of them contains a pattern matching given filename.
     */
    isIgnored(filename: string): boolean;
    /**
     * Clear cache.
     *
     * Previously fetched [[HtmlValidate]] instances must either be fetched again
     * or call [[HtmlValidate.flushConfigCache]].
     */
    clearCache(): void;
    /**
     * Get HtmlValidate instance with configuration based on options passed to the
     * constructor.
     *
     * @internal
     */
    getLoader(): ConfigLoader;
    /**
     * Get HtmlValidate instance with configuration based on options passed to the
     * constructor.
     *
     * @public
     */
    getValidator(): HtmlValidate;
    /**
     * @internal
     */
    getConfig(): ConfigData;
}

export { CLI };
